// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Database;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240801072448_Image")]
    partial class Image
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Web.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("file_path");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("upload_date");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("Web.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 8, 1, 7, 24, 47, 851, DateTimeKind.Utc).AddTicks(1427),
                            Name = "Admin",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 24, 47, 851, DateTimeKind.Utc).AddTicks(1429)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 8, 1, 7, 24, 47, 851, DateTimeKind.Utc).AddTicks(1432),
                            Name = "User",
                            UpdatedAt = new DateTime(2024, 8, 1, 7, 24, 47, 851, DateTimeKind.Utc).AddTicks(1432)
                        });
                });

            modelBuilder.Entity("Web.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email_address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmailAddress" }, "email_address_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email_address");

                    b.HasIndex(new[] { "UserId" }, "uid_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("ix_users_user_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            CreatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4825),
                            EmailAddress = "john@example.com",
                            Name = "John Doe",
                            Password = "password123",
                            UpdatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4835)
                        },
                        new
                        {
                            UserId = "2",
                            CreatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4838),
                            EmailAddress = "jane@example.com",
                            Name = "Jane Smith",
                            Password = "password234",
                            UpdatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4838)
                        },
                        new
                        {
                            UserId = "3",
                            CreatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4839),
                            EmailAddress = "alice@example.com",
                            Name = "Alice Johnson",
                            Password = "password345",
                            UpdatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4840)
                        },
                        new
                        {
                            UserId = "4",
                            CreatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4841),
                            EmailAddress = "chris@example.com",
                            Name = "Chris Laid",
                            Password = "password456",
                            UpdatedAt = new DateTime(2024, 8, 1, 15, 24, 47, 851, DateTimeKind.Local).AddTicks(4841)
                        });
                });

            modelBuilder.Entity("Web.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(45)")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Web.Models.UserRole", b =>
                {
                    b.HasOne("Web.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("Web.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Web.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Web.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
